## --------------------------------------------------
## Testing
## --------------------------------------------------
data              <- ags_points
distance_matrix_  <- distance_matrix
min_pop_centroids <- c(1000, 25, 25, 25, 25, 25)
min_pop_criterion <- FALSE
mode              <- 'driving'
## test
test <- iterative_clustering(data,
distance_matrix_,
min_pop_centroids = min_pop_centroids,
min_pop_criterion = min_pop_criterion,
mode = mode)
########################################
########################################
########################################
## = Autores
##
## - Luis Manuel Román García
## - Miguel Alonso Vilchis
##
## -------------------------------------
## = Descripción
##
## Código para construcción de red
## basada en distancias carreteras.
##
########################################
########################################
########################################
########################################
## Libraries
########################################
source("libraries.R")
source("utils.R")
source("clustering.R")
###############################################
##########         MAIN        ################
###############################################
set.seed(123454321)
data        <- read.csv("../data/data_censo.csv",
stringsAsFactors = FALSE)
## data[,1]    <- NULL
names(data) <- c("ent",
"mun",
"nom_mun",
"nom_loc",
"lon",
"lat",
"pob")
## Work with Aguascalientes
## 1 <- Ags
ags_mun    <- dplyr::filter(data, ent == 1)
ags_points <- dplyr::select(ags_mun, lon, lat, pob)
if (!file.exists("distance_matrix.RData")) {
distance_matrix <- new.env(hash = TRUE)
}else {
attach("distance_matrix.RData")
}
## --------------------------------------------------
## Testing
## --------------------------------------------------
data              <- ags_points
distance_matrix_  <- distance_matrix
min_pop_centroids <- c(1000, 25, 25, 25, 25, 25)
min_pop_criterion <- FALSE
mode              <- 'driving'
## test
test <- iterative_clustering(data,
distance_matrix_,
min_pop_centroids = min_pop_centroids,
min_pop_criterion = min_pop_criterion,
mode = mode)
## --------------------------------------------------
## Save hash table
## --------------------------------------------------
save(distance_matrix, file = "distance_matrix.RData")
########################################
########################################
########################################
## = Autores
##
## - Luis Manuel Román García
## - Miguel Alonso Vilchis
##
## -------------------------------------
## = Descripción
##
## Código para construcción de red
## basada en distancias carreteras.
##
########################################
########################################
########################################
########################################
## Libraries
########################################
source("libraries.R")
source("utils.R")
source("clustering.R")
###############################################
##########         MAIN        ################
###############################################
set.seed(123454321)
data        <- read.csv("../data/data_censo.csv",
stringsAsFactors = FALSE)
## data[,1]    <- NULL
names(data) <- c("ent",
"mun",
"nom_mun",
"nom_loc",
"lon",
"lat",
"pob")
## Work with Aguascalientes
## 1 <- Ags
ags_mun    <- dplyr::filter(data, ent == 1)
ags_points <- dplyr::select(ags_mun, lon, lat, pob)
if (!file.exists("distance_matrix.RData")) {
distance_matrix <- new.env(hash = TRUE)
}else {
attach("distance_matrix.RData")
}
## --------------------------------------------------
## Testing
## --------------------------------------------------
data              <- ags_points
distance_matrix_  <- distance_matrix
min_pop_centroids <- c(1000, 25, 25, 25, 25, 25)
min_pop_criterion <- FALSE
mode              <- 'driving'
## test
test <- iterative_clustering(data,
distance_matrix_,
min_pop_centroids = min_pop_centroids,
min_pop_criterion = min_pop_criterion,
mode = mode)
## --------------------------------------------------
## Save hash table
## --------------------------------------------------
save(distance_matrix, file = "distance_matrix.RData")
resp <- paste("https://maps.googleapis.com/maps/api/directions/json?&origin=21.8808333333333,-102.296111111111&destination=21.8869444444444,-102.359444444444&mode=driving", google_keys[this_key], sep="&key=")
resp
url <- resp
curl     <- getCurlHandle()
resp     <- getURL(url, curl = curl)
info_url <- getCurlInfo(curl)
info_url$response.code
fromJSON(resp)
RJSONIO::fromJSON(resp)
RJSONIO::fromJSON(resp)
RJSONIO::fromJSON(resp)
RJSONIO::fromJSON(resp)
resp
url
library(jsonlite)
toJSON(resp)
fromJSON(resp)
fromJSON(toJSON(resp))
fromJSON(toJSON(resp),simplifyVector = FALSE)
mydf <- fromJSON(resp)
library(jqr)
install.packages("jqr")
install.packages("jqr")
jq(resp)
library(jqr)
jq(resp)
jq(resp,'.[]')
resp
base
resp     <- getURL(url, curl = curl)
url
RJSONIO::fromJSON(url)
RJSONIO::fromJSON(url,curl=curl)
a <- RJSONIO::fromJSON(url,curl=curl)
a$response
a <- cGET(url)
a <- GET(url)
library(httr)
a <- GET(url)
a$status_code
a <- RJSONIO::fromJSON(a,curl=curl)
a
a$content
a$handle
a$request
a$cookies
content(a)
a$status_code
########################################
########################################
########################################
## = Autores
##
## - Luis Manuel Román García
## - Miguel Alonso Vilchis
##
## -------------------------------------
## = Descripción
##
## Código para construcción de red
## basada en distancias carreteras.
##
########################################
########################################
########################################
########################################
## Libraries
########################################
source("libraries.R")
source("utils.R")
source("clustering.R")
###############################################
##########         MAIN        ################
###############################################
set.seed(123454321)
data        <- read.csv("../data/data_censo.csv",
stringsAsFactors = FALSE)
## data[,1]    <- NULL
names(data) <- c("ent",
"mun",
"nom_mun",
"nom_loc",
"lon",
"lat",
"pob")
## Work with Aguascalientes
## 1 <- Ags
ags_mun    <- dplyr::filter(data, ent == 1)
ags_points <- dplyr::select(ags_mun, lon, lat, pob)
if (!file.exists("distance_matrix.RData")) {
distance_matrix <- new.env(hash = TRUE)
}else {
attach("distance_matrix.RData")
}
## --------------------------------------------------
## Testing
## --------------------------------------------------
data              <- ags_points
distance_matrix_  <- distance_matrix
min_pop_centroids <- c(1000, 25, 25, 25, 25, 25)
min_pop_criterion <- FALSE
mode              <- 'driving'
## test
test <- iterative_clustering(data,
distance_matrix_,
min_pop_centroids = min_pop_centroids,
min_pop_criterion = min_pop_criterion,
mode = mode)
## --------------------------------------------------
## Save hash table
## --------------------------------------------------
save(distance_matrix, file = "distance_matrix.RData")
########################################
########################################
########################################
## = Autores
##
## - Luis Manuel Román García
## - Miguel Alonso Vilchis
##
## -------------------------------------
## = Descripción
##
## Código para construcción de red
## basada en distancias carreteras.
##
########################################
########################################
########################################
########################################
## Libraries
########################################
source("libraries.R")
source("utils.R")
source("clustering.R")
###############################################
##########         MAIN        ################
###############################################
set.seed(123454321)
data        <- read.csv("../data/data_censo.csv",
stringsAsFactors = FALSE)
## data[,1]    <- NULL
names(data) <- c("ent",
"mun",
"nom_mun",
"nom_loc",
"lon",
"lat",
"pob")
## Work with Aguascalientes
## 1 <- Ags
ags_mun    <- dplyr::filter(data, ent == 1)
ags_points <- dplyr::select(ags_mun, lon, lat, pob)
if (!file.exists("distance_matrix.RData")) {
distance_matrix <- new.env(hash = TRUE)
}else {
attach("distance_matrix.RData")
}
## --------------------------------------------------
## Testing
## --------------------------------------------------
data              <- ags_points
distance_matrix_  <- distance_matrix
min_pop_centroids <- c(1000, 25, 25, 25, 25, 25)
min_pop_criterion <- FALSE
mode              <- 'driving'
## test
test <- iterative_clustering(data,
distance_matrix_,
min_pop_centroids = min_pop_centroids,
min_pop_criterion = min_pop_criterion,
mode = mode)
## --------------------------------------------------
## Save hash table
## --------------------------------------------------
save(distance_matrix, file = "distance_matrix.RData")
this_key
########################################
########################################
########################################
## = Autores
##
## - Luis Manuel Román García
## - Miguel Alonso Vilchis
##
## -------------------------------------
## = Descripción
##
## Código para construcción de red
## basada en distancias carreteras.
##
########################################
########################################
########################################
########################################
## Libraries
########################################
source("libraries.R")
source("utils.R")
source("clustering.R")
###############################################
##########         MAIN        ################
###############################################
set.seed(123454321)
data        <- read.csv("../data/data_censo.csv",
stringsAsFactors = FALSE)
## data[,1]    <- NULL
names(data) <- c("ent",
"mun",
"nom_mun",
"nom_loc",
"lon",
"lat",
"pob")
## Work with Aguascalientes
## 1 <- Ags
ags_mun    <- dplyr::filter(data, ent == 1)
ags_points <- dplyr::select(ags_mun, lon, lat, pob)
if (!file.exists("distance_matrix.RData")) {
distance_matrix <- new.env(hash = TRUE)
}else {
attach("distance_matrix.RData")
}
## --------------------------------------------------
## Testing
## --------------------------------------------------
data              <- ags_points
distance_matrix_  <- distance_matrix
min_pop_centroids <- c(1000, 25, 25, 25, 25, 25)
min_pop_criterion <- FALSE
mode              <- 'driving'
## test
test <- iterative_clustering(data,
distance_matrix_,
min_pop_centroids = min_pop_centroids,
min_pop_criterion = min_pop_criterion,
mode = mode)
## --------------------------------------------------
## Save hash table
## --------------------------------------------------
save(distance_matrix, file = "distance_matrix.RData")
########################################
########################################
########################################
## = Autores
##
## - Luis Manuel Román García
## - Miguel Alonso Vilchis
##
## -------------------------------------
## = Descripción
##
## Código para construcción de red
## basada en distancias carreteras.
##
########################################
########################################
########################################
########################################
## Libraries
########################################
source("libraries.R")
source("utils.R")
source("clustering.R")
###############################################
##########         MAIN        ################
###############################################
set.seed(123454321)
data        <- read.csv("../data/data_censo.csv",
stringsAsFactors = FALSE)
## data[,1]    <- NULL
names(data) <- c("ent",
"mun",
"nom_mun",
"nom_loc",
"lon",
"lat",
"pob")
## Work with Aguascalientes
## 1 <- Ags
ags_mun    <- dplyr::filter(data, ent == 1)
ags_points <- dplyr::select(ags_mun, lon, lat, pob)
if (!file.exists("distance_matrix.RData")) {
distance_matrix <- new.env(hash = TRUE)
}else {
attach("distance_matrix.RData")
}
## --------------------------------------------------
## Testing
## --------------------------------------------------
data              <- ags_points
distance_matrix_  <- distance_matrix
min_pop_centroids <- c(1000, 25, 25, 25, 25, 25)
min_pop_criterion <- FALSE
mode              <- 'driving'
## test
test <- iterative_clustering(data,
distance_matrix_,
min_pop_centroids = min_pop_centroids,
min_pop_criterion = min_pop_criterion,
mode = mode)
## --------------------------------------------------
## Save hash table
## --------------------------------------------------
save(distance_matrix, file = "distance_matrix.RData")
########################################
########################################
########################################
## = Autores
##
## - Luis Manuel Román García
## - Miguel Alonso Vilchis
##
## -------------------------------------
## = Descripción
##
## Código para construcción de red
## basada en distancias carreteras.
##
########################################
########################################
########################################
########################################
## Libraries
########################################
source("libraries.R")
source("utils.R")
source("clustering.R")
###############################################
##########         MAIN        ################
###############################################
set.seed(123454321)
data        <- read.csv("../data/data_censo.csv",
stringsAsFactors = FALSE)
## data[,1]    <- NULL
names(data) <- c("ent",
"mun",
"nom_mun",
"nom_loc",
"lon",
"lat",
"pob")
## Work with Aguascalientes
## 1 <- Ags
ags_mun    <- dplyr::filter(data, ent == 1)
ags_points <- dplyr::select(ags_mun, lon, lat, pob)
if (!file.exists("distance_matrix.RData")) {
distance_matrix <- new.env(hash = TRUE)
}else {
attach("distance_matrix.RData")
}
## --------------------------------------------------
## Testing
## --------------------------------------------------
data              <- ags_points
distance_matrix_  <- distance_matrix
min_pop_centroids <- c(1000, 25, 25, 25, 25, 25)
min_pop_criterion <- FALSE
mode              <- 'driving'
## test
test <- iterative_clustering(data,
distance_matrix_,
min_pop_centroids = min_pop_centroids,
min_pop_criterion = min_pop_criterion,
mode = mode)
## --------------------------------------------------
## Save hash table
## --------------------------------------------------
save(distance_matrix, file = "distance_matrix.RData")
test$plot
